// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package initializemocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// RunInit provides a mock function for the type MockService
func (_mock *MockService) RunInit(dryRun bool) error {
	ret := _mock.Called(dryRun)

	if len(ret) == 0 {
		panic("no return value specified for RunInit")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(bool) error); ok {
		r0 = returnFunc(dryRun)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_RunInit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunInit'
type MockService_RunInit_Call struct {
	*mock.Call
}

// RunInit is a helper method to define mock.On call
//   - dryRun bool
func (_e *MockService_Expecter) RunInit(dryRun interface{}) *MockService_RunInit_Call {
	return &MockService_RunInit_Call{Call: _e.mock.On("RunInit", dryRun)}
}

func (_c *MockService_RunInit_Call) Run(run func(dryRun bool)) *MockService_RunInit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 bool
		if args[0] != nil {
			arg0 = args[0].(bool)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockService_RunInit_Call) Return(err error) *MockService_RunInit_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_RunInit_Call) RunAndReturn(run func(dryRun bool) error) *MockService_RunInit_Call {
	_c.Call.Return(run)
	return _c
}
