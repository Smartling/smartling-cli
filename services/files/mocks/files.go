// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package filesmocks

import (
	"github.com/Smartling/smartling-cli/services/files"
	mock "github.com/stretchr/testify/mock"
)

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// RunDelete provides a mock function for the type MockService
func (_mock *MockService) RunDelete(uri string) error {
	ret := _mock.Called(uri)

	if len(ret) == 0 {
		panic("no return value specified for RunDelete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(uri)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_RunDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunDelete'
type MockService_RunDelete_Call struct {
	*mock.Call
}

// RunDelete is a helper method to define mock.On call
//   - uri string
func (_e *MockService_Expecter) RunDelete(uri interface{}) *MockService_RunDelete_Call {
	return &MockService_RunDelete_Call{Call: _e.mock.On("RunDelete", uri)}
}

func (_c *MockService_RunDelete_Call) Run(run func(uri string)) *MockService_RunDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockService_RunDelete_Call) Return(err error) *MockService_RunDelete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_RunDelete_Call) RunAndReturn(run func(uri string) error) *MockService_RunDelete_Call {
	_c.Call.Return(run)
	return _c
}

// RunImport provides a mock function for the type MockService
func (_mock *MockService) RunImport(params files.ImportParams) error {
	ret := _mock.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for RunImport")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(files.ImportParams) error); ok {
		r0 = returnFunc(params)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_RunImport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunImport'
type MockService_RunImport_Call struct {
	*mock.Call
}

// RunImport is a helper method to define mock.On call
//   - params files.ImportParams
func (_e *MockService_Expecter) RunImport(params interface{}) *MockService_RunImport_Call {
	return &MockService_RunImport_Call{Call: _e.mock.On("RunImport", params)}
}

func (_c *MockService_RunImport_Call) Run(run func(params files.ImportParams)) *MockService_RunImport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 files.ImportParams
		if args[0] != nil {
			arg0 = args[0].(files.ImportParams)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockService_RunImport_Call) Return(err error) *MockService_RunImport_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_RunImport_Call) RunAndReturn(run func(params files.ImportParams) error) *MockService_RunImport_Call {
	_c.Call.Return(run)
	return _c
}

// RunList provides a mock function for the type MockService
func (_mock *MockService) RunList(formatType string, short bool, uri string) error {
	ret := _mock.Called(formatType, short, uri)

	if len(ret) == 0 {
		panic("no return value specified for RunList")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, bool, string) error); ok {
		r0 = returnFunc(formatType, short, uri)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_RunList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunList'
type MockService_RunList_Call struct {
	*mock.Call
}

// RunList is a helper method to define mock.On call
//   - formatType string
//   - short bool
//   - uri string
func (_e *MockService_Expecter) RunList(formatType interface{}, short interface{}, uri interface{}) *MockService_RunList_Call {
	return &MockService_RunList_Call{Call: _e.mock.On("RunList", formatType, short, uri)}
}

func (_c *MockService_RunList_Call) Run(run func(formatType string, short bool, uri string)) *MockService_RunList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 bool
		if args[1] != nil {
			arg1 = args[1].(bool)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockService_RunList_Call) Return(err error) *MockService_RunList_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_RunList_Call) RunAndReturn(run func(formatType string, short bool, uri string) error) *MockService_RunList_Call {
	_c.Call.Return(run)
	return _c
}

// RunPull provides a mock function for the type MockService
func (_mock *MockService) RunPull(params files.PullParams) error {
	ret := _mock.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for RunPull")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(files.PullParams) error); ok {
		r0 = returnFunc(params)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_RunPull_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunPull'
type MockService_RunPull_Call struct {
	*mock.Call
}

// RunPull is a helper method to define mock.On call
//   - params files.PullParams
func (_e *MockService_Expecter) RunPull(params interface{}) *MockService_RunPull_Call {
	return &MockService_RunPull_Call{Call: _e.mock.On("RunPull", params)}
}

func (_c *MockService_RunPull_Call) Run(run func(params files.PullParams)) *MockService_RunPull_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 files.PullParams
		if args[0] != nil {
			arg0 = args[0].(files.PullParams)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockService_RunPull_Call) Return(err error) *MockService_RunPull_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_RunPull_Call) RunAndReturn(run func(params files.PullParams) error) *MockService_RunPull_Call {
	_c.Call.Return(run)
	return _c
}

// RunPush provides a mock function for the type MockService
func (_mock *MockService) RunPush(params files.PushParams) error {
	ret := _mock.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for RunPush")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(files.PushParams) error); ok {
		r0 = returnFunc(params)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_RunPush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunPush'
type MockService_RunPush_Call struct {
	*mock.Call
}

// RunPush is a helper method to define mock.On call
//   - params files.PushParams
func (_e *MockService_Expecter) RunPush(params interface{}) *MockService_RunPush_Call {
	return &MockService_RunPush_Call{Call: _e.mock.On("RunPush", params)}
}

func (_c *MockService_RunPush_Call) Run(run func(params files.PushParams)) *MockService_RunPush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 files.PushParams
		if args[0] != nil {
			arg0 = args[0].(files.PushParams)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockService_RunPush_Call) Return(err error) *MockService_RunPush_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_RunPush_Call) RunAndReturn(run func(params files.PushParams) error) *MockService_RunPush_Call {
	_c.Call.Return(run)
	return _c
}

// RunRename provides a mock function for the type MockService
func (_mock *MockService) RunRename(oldURI string, newURI string) error {
	ret := _mock.Called(oldURI, newURI)

	if len(ret) == 0 {
		panic("no return value specified for RunRename")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(oldURI, newURI)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_RunRename_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunRename'
type MockService_RunRename_Call struct {
	*mock.Call
}

// RunRename is a helper method to define mock.On call
//   - oldURI string
//   - newURI string
func (_e *MockService_Expecter) RunRename(oldURI interface{}, newURI interface{}) *MockService_RunRename_Call {
	return &MockService_RunRename_Call{Call: _e.mock.On("RunRename", oldURI, newURI)}
}

func (_c *MockService_RunRename_Call) Run(run func(oldURI string, newURI string)) *MockService_RunRename_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockService_RunRename_Call) Return(err error) *MockService_RunRename_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_RunRename_Call) RunAndReturn(run func(oldURI string, newURI string) error) *MockService_RunRename_Call {
	_c.Call.Return(run)
	return _c
}

// RunStatus provides a mock function for the type MockService
func (_mock *MockService) RunStatus(params files.StatusParams) error {
	ret := _mock.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for RunStatus")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(files.StatusParams) error); ok {
		r0 = returnFunc(params)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_RunStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunStatus'
type MockService_RunStatus_Call struct {
	*mock.Call
}

// RunStatus is a helper method to define mock.On call
//   - params files.StatusParams
func (_e *MockService_Expecter) RunStatus(params interface{}) *MockService_RunStatus_Call {
	return &MockService_RunStatus_Call{Call: _e.mock.On("RunStatus", params)}
}

func (_c *MockService_RunStatus_Call) Run(run func(params files.StatusParams)) *MockService_RunStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 files.StatusParams
		if args[0] != nil {
			arg0 = args[0].(files.StatusParams)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockService_RunStatus_Call) Return(err error) *MockService_RunStatus_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_RunStatus_Call) RunAndReturn(run func(params files.StatusParams) error) *MockService_RunStatus_Call {
	_c.Call.Return(run)
	return _c
}
