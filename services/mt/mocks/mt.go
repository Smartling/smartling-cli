// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mtmocks

import (
	"context"

	"github.com/Smartling/smartling-cli/services/mt"
	mock "github.com/stretchr/testify/mock"
)

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// GetFiles provides a mock function for the type MockService
func (_mock *MockService) GetFiles(inputDirectory string, fileOrPattern string) ([]string, error) {
	ret := _mock.Called(inputDirectory, fileOrPattern)

	if len(ret) == 0 {
		panic("no return value specified for GetFiles")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) ([]string, error)); ok {
		return returnFunc(inputDirectory, fileOrPattern)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) []string); ok {
		r0 = returnFunc(inputDirectory, fileOrPattern)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(inputDirectory, fileOrPattern)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_GetFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFiles'
type MockService_GetFiles_Call struct {
	*mock.Call
}

// GetFiles is a helper method to define mock.On call
//   - inputDirectory string
//   - fileOrPattern string
func (_e *MockService_Expecter) GetFiles(inputDirectory interface{}, fileOrPattern interface{}) *MockService_GetFiles_Call {
	return &MockService_GetFiles_Call{Call: _e.mock.On("GetFiles", inputDirectory, fileOrPattern)}
}

func (_c *MockService_GetFiles_Call) Run(run func(inputDirectory string, fileOrPattern string)) *MockService_GetFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockService_GetFiles_Call) Return(strings []string, err error) *MockService_GetFiles_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockService_GetFiles_Call) RunAndReturn(run func(inputDirectory string, fileOrPattern string) ([]string, error)) *MockService_GetFiles_Call {
	_c.Call.Return(run)
	return _c
}

// RunDetect provides a mock function for the type MockService
func (_mock *MockService) RunDetect(ctx context.Context, files []string, p mt.DetectParams, updates chan any) ([]mt.DetectOutput, error) {
	ret := _mock.Called(ctx, files, p, updates)

	if len(ret) == 0 {
		panic("no return value specified for RunDetect")
	}

	var r0 []mt.DetectOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string, mt.DetectParams, chan any) ([]mt.DetectOutput, error)); ok {
		return returnFunc(ctx, files, p, updates)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string, mt.DetectParams, chan any) []mt.DetectOutput); ok {
		r0 = returnFunc(ctx, files, p, updates)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]mt.DetectOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []string, mt.DetectParams, chan any) error); ok {
		r1 = returnFunc(ctx, files, p, updates)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_RunDetect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunDetect'
type MockService_RunDetect_Call struct {
	*mock.Call
}

// RunDetect is a helper method to define mock.On call
//   - ctx context.Context
//   - files []string
//   - p mt.DetectParams
//   - updates chan any
func (_e *MockService_Expecter) RunDetect(ctx interface{}, files interface{}, p interface{}, updates interface{}) *MockService_RunDetect_Call {
	return &MockService_RunDetect_Call{Call: _e.mock.On("RunDetect", ctx, files, p, updates)}
}

func (_c *MockService_RunDetect_Call) Run(run func(ctx context.Context, files []string, p mt.DetectParams, updates chan any)) *MockService_RunDetect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []string
		if args[1] != nil {
			arg1 = args[1].([]string)
		}
		var arg2 mt.DetectParams
		if args[2] != nil {
			arg2 = args[2].(mt.DetectParams)
		}
		var arg3 chan any
		if args[3] != nil {
			arg3 = args[3].(chan any)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockService_RunDetect_Call) Return(detectOutputs []mt.DetectOutput, err error) *MockService_RunDetect_Call {
	_c.Call.Return(detectOutputs, err)
	return _c
}

func (_c *MockService_RunDetect_Call) RunAndReturn(run func(ctx context.Context, files []string, p mt.DetectParams, updates chan any) ([]mt.DetectOutput, error)) *MockService_RunDetect_Call {
	_c.Call.Return(run)
	return _c
}

// RunTranslate provides a mock function for the type MockService
func (_mock *MockService) RunTranslate(ctx context.Context, p mt.TranslateParams, files []string, updates chan any) ([]mt.TranslateOutput, error) {
	ret := _mock.Called(ctx, p, files, updates)

	if len(ret) == 0 {
		panic("no return value specified for RunTranslate")
	}

	var r0 []mt.TranslateOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, mt.TranslateParams, []string, chan any) ([]mt.TranslateOutput, error)); ok {
		return returnFunc(ctx, p, files, updates)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, mt.TranslateParams, []string, chan any) []mt.TranslateOutput); ok {
		r0 = returnFunc(ctx, p, files, updates)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]mt.TranslateOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, mt.TranslateParams, []string, chan any) error); ok {
		r1 = returnFunc(ctx, p, files, updates)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_RunTranslate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunTranslate'
type MockService_RunTranslate_Call struct {
	*mock.Call
}

// RunTranslate is a helper method to define mock.On call
//   - ctx context.Context
//   - p mt.TranslateParams
//   - files []string
//   - updates chan any
func (_e *MockService_Expecter) RunTranslate(ctx interface{}, p interface{}, files interface{}, updates interface{}) *MockService_RunTranslate_Call {
	return &MockService_RunTranslate_Call{Call: _e.mock.On("RunTranslate", ctx, p, files, updates)}
}

func (_c *MockService_RunTranslate_Call) Run(run func(ctx context.Context, p mt.TranslateParams, files []string, updates chan any)) *MockService_RunTranslate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 mt.TranslateParams
		if args[1] != nil {
			arg1 = args[1].(mt.TranslateParams)
		}
		var arg2 []string
		if args[2] != nil {
			arg2 = args[2].([]string)
		}
		var arg3 chan any
		if args[3] != nil {
			arg3 = args[3].(chan any)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockService_RunTranslate_Call) Return(translateOutputs []mt.TranslateOutput, err error) *MockService_RunTranslate_Call {
	_c.Call.Return(translateOutputs, err)
	return _c
}

func (_c *MockService_RunTranslate_Call) RunAndReturn(run func(ctx context.Context, p mt.TranslateParams, files []string, updates chan any) ([]mt.TranslateOutput, error)) *MockService_RunTranslate_Call {
	_c.Call.Return(run)
	return _c
}
