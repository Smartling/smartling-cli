// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package filesmocks

import (
	"github.com/Smartling/smartling-cli/services/files"
	mock "github.com/stretchr/testify/mock"
)

// NewMockSrvInitializer creates a new instance of MockSrvInitializer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSrvInitializer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSrvInitializer {
	mock := &MockSrvInitializer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSrvInitializer is an autogenerated mock type for the SrvInitializer type
type MockSrvInitializer struct {
	mock.Mock
}

type MockSrvInitializer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSrvInitializer) EXPECT() *MockSrvInitializer_Expecter {
	return &MockSrvInitializer_Expecter{mock: &_m.Mock}
}

// InitFilesSrv provides a mock function for the type MockSrvInitializer
func (_mock *MockSrvInitializer) InitFilesSrv() (files.Service, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for InitFilesSrv")
	}

	var r0 files.Service
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (files.Service, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() files.Service); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(files.Service)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSrvInitializer_InitFilesSrv_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitFilesSrv'
type MockSrvInitializer_InitFilesSrv_Call struct {
	*mock.Call
}

// InitFilesSrv is a helper method to define mock.On call
func (_e *MockSrvInitializer_Expecter) InitFilesSrv() *MockSrvInitializer_InitFilesSrv_Call {
	return &MockSrvInitializer_InitFilesSrv_Call{Call: _e.mock.On("InitFilesSrv")}
}

func (_c *MockSrvInitializer_InitFilesSrv_Call) Run(run func()) *MockSrvInitializer_InitFilesSrv_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSrvInitializer_InitFilesSrv_Call) Return(service files.Service, err error) *MockSrvInitializer_InitFilesSrv_Call {
	_c.Call.Return(service, err)
	return _c
}

func (_c *MockSrvInitializer_InitFilesSrv_Call) RunAndReturn(run func() (files.Service, error)) *MockSrvInitializer_InitFilesSrv_Call {
	_c.Call.Return(run)
	return _c
}
